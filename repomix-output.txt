This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-01T03:11:02.966Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
src/
  services/
    __tests__/
      tally.service.test.ts
    tally.service.ts
  index.ts
  server.ts
.env.example
.gitignore
jest.config.js
LICENSE
package.json
README.md
tsconfig.json

================================================================
Files
================================================================

================
File: src/services/__tests__/tally.service.test.ts
================
import { TallyService, type Organization } from '../tally.service.js';
import { describe, test, expect, beforeAll, beforeEach, mock } from 'bun:test';
import { gql } from 'graphql-request';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Mock GraphQL client
class MockGraphQLClient {
  endpoint: string;
  requestConfig: any;
  mockRequest: ReturnType<typeof mock>;

  constructor(endpoint: string, config: any) {
    this.endpoint = endpoint;
    this.requestConfig = config;
    this.mockRequest = mock(() => Promise.resolve({
      organizations: {
        nodes: [],
        pageInfo: { firstCursor: null, lastCursor: null }
      }
    }));
  }

  request = (...args: any[]) => this.mockRequest(...args);
}

// Live test configuration
const LIVE_API_KEY = process.env.TALLY_API_KEY;
console.log('API Key available:', !!LIVE_API_KEY);
const runLiveTests = !!LIVE_API_KEY;

(runLiveTests ? describe : describe.skip)('TallyService Live Tests', () => {
  let service: TallyService;

  beforeAll(() => {
    service = new TallyService({ apiKey: LIVE_API_KEY! });
  });

  test('should fetch DAOs from the live API', async () => {
    try {
      const response = await service.listDAOs({ limit: 5, sortBy: 'popular' });
      console.log('Live API Response:', response);
      expect(response.organizations.nodes.length).toBeGreaterThan(0);
      expect(response.organizations.nodes[0]).toHaveProperty('id');
      expect(response.organizations.nodes[0]).toHaveProperty('name');
    } catch (error) {
      console.error('Error fetching from live API:', error);
      throw error;
    }
  });
});

describe('TallyService', () => {
  let service: TallyService;
  let mockClient: MockGraphQLClient;
  const mockApiKey = 'test-api-key';

  beforeEach(() => {
    mockClient = new MockGraphQLClient('https://api.tally.xyz/query', {
      headers: { 'Api-Key': mockApiKey }
    });
    service = new TallyService({ apiKey: mockApiKey });
    (service as any).client = mockClient;
  });

  describe('constructor', () => {
    test('should initialize with default base URL when not provided', () => {
      const service = new TallyService({ apiKey: 'test' });
      const client = (service as any).client;
      expect(client.url).toBe('https://api.tally.xyz/query');
    });

    test('should initialize with custom base URL when provided', () => {
      const customUrl = 'https://custom.api.xyz';
      const service = new TallyService({ apiKey: 'test', baseUrl: customUrl });
      const client = (service as any).client;
      expect(client.url).toBe(customUrl);
    });

    test('should set API key in headers', () => {
      const service = new TallyService({ apiKey: 'test-key' });
      const client = (service as any).client;
      expect(client.requestConfig.headers['Api-Key']).toBe('test-key');
    });
  });

  describe('listDAOs', () => {
    const mockOrganization: Organization = {
      id: '1',
      slug: 'test-dao',
      name: 'Test DAO',
      chainIds: ['eip155:1'],
      metadata: {
        description: 'Test Description',
        websiteUrl: 'https://test.com'
      },
      hasActiveProposals: true,
      proposalsCount: 5,
      delegatesCount: 10,
      tokenOwnersCount: 100
    };

    test('should format the input correctly', async () => {
      mockClient.mockRequest.mockImplementation(() => Promise.resolve({
        organizations: {
          nodes: [mockOrganization],
          pageInfo: {
            firstCursor: null,
            lastCursor: null
          }
        }
      }));

      await service.listDAOs({
        limit: 10,
        sortBy: 'popular'
      });

      expect(mockClient.mockRequest).toHaveBeenCalledWith(
        expect.any(String),
        expect.objectContaining({
          input: {
            sort: {
              sortBy: 'popular',
              isDescending: true
            },
            page: {
              limit: 10
            }
          }
        })
      );
    });

    test('should handle different sort options', async () => {
      mockClient.mockRequest.mockImplementation(() => Promise.resolve({
        organizations: { nodes: [mockOrganization], pageInfo: { firstCursor: null, lastCursor: null } }
      }));

      await service.listDAOs({ sortBy: 'explore' });
      
      expect(mockClient.mockRequest).toHaveBeenCalledWith(
        expect.any(String),
        expect.objectContaining({
          input: {
            sort: {
              sortBy: 'explore',
              isDescending: true
            },
            page: {
              limit: 20
            }
          }
        })
      );
    });

    test('should format the response correctly with full metadata', () => {
      const orgWithFullMetadata: Organization = {
        ...mockOrganization,
        metadata: {
          description: 'Full Description',
          websiteUrl: 'https://test.com',
          icon: 'https://icon.com',
          twitter: '@test',
          discord: 'discord.gg/test',
          github: 'github.com/test',
          termsOfService: 'https://tos.com',
          governanceUrl: 'https://gov.com'
        }
      };

      const formatted = TallyService.formatDAOList([orgWithFullMetadata]);
      expect(formatted).toContain('Full Description');
      expect(formatted).toContain('@test');
      expect(formatted).toContain('discord.gg/test');
      expect(formatted).toContain('github.com/test');
    });

    test('should handle missing metadata gracefully', () => {
      const orgWithoutMetadata: Organization = {
        ...mockOrganization,
        metadata: undefined
      };

      const formatted = TallyService.formatDAOList([orgWithoutMetadata]);
      expect(formatted).toContain('No description available');
      expect(formatted).toContain('N/A');
    });

    test('should handle pagination cursors', async () => {
      mockClient.mockRequest.mockImplementation(() => Promise.resolve({
        organizations: {
          nodes: [mockOrganization],
          pageInfo: {
            firstCursor: 'first',
            lastCursor: 'last'
          }
        }
      }));

      await service.listDAOs({
        afterCursor: 'cursor123'
      });

      expect(mockClient.mockRequest).toHaveBeenCalledWith(
        expect.any(String),
        expect.objectContaining({
          input: {
            sort: {
              sortBy: 'popular',
              isDescending: true
            },
            page: {
              limit: 20,
              afterCursor: 'cursor123'
            }
          }
        })
      );
    });

    test('should handle GraphQL errors', async () => {
      const errorMessage = 'GraphQL Error';
      mockClient.mockRequest.mockImplementation(() => Promise.reject(new Error(errorMessage)));

      await expect(service.listDAOs()).rejects.toThrow(`Failed to fetch DAOs: ${errorMessage}`);
    });

    test('should handle empty response', async () => {
      mockClient.mockRequest.mockImplementation(() => Promise.resolve({
        organizations: {
          nodes: [],
          pageInfo: { firstCursor: null, lastCursor: null }
        }
      }));

      const result = await service.listDAOs();
      expect(result.organizations.nodes).toHaveLength(0);
      
      const formatted = TallyService.formatDAOList(result.organizations.nodes);
      expect(formatted).toContain('Found 0 DAOs');
    });
  });
});

================
File: src/services/tally.service.ts
================
import { GraphQLClient, gql } from 'graphql-request';

export interface TallyServiceConfig {
  apiKey: string;
  baseUrl?: string;
}

export type OrganizationsSortBy = "id" | "name" | "explore" | "popular";

export interface OrganizationsSortInput {
  isDescending: boolean;
  sortBy: OrganizationsSortBy;
}

export interface PageInput {
  afterCursor?: string;
  beforeCursor?: string;
  limit?: number;
}

export interface OrganizationsFiltersInput {
  hasLogo?: boolean;
  chainId?: string;
  isMember?: boolean;
  address?: string;
}

export interface OrganizationsInput {
  filters?: OrganizationsFiltersInput;
  page?: PageInput;
  sort?: OrganizationsSortInput;
}

export interface ListDAOsParams {
  limit?: number;
  afterCursor?: string;
  beforeCursor?: string;
  sortBy?: OrganizationsSortBy;
}

export interface Organization {
  id: string;
  slug: string;
  name: string;
  chainIds: string[];
  metadata?: {
    description?: string;
    icon?: string;
    websiteUrl?: string;
    twitter?: string;
    discord?: string;
    github?: string;
    termsOfService?: string;
    governanceUrl?: string;
  };
  hasActiveProposals: boolean;
  proposalsCount: number;
  delegatesCount: number;
  tokenOwnersCount: number;
}

export interface PageInfo {
  firstCursor: string | null;
  lastCursor: string | null;
}

export interface OrganizationsResponse {
  organizations: {
    nodes: Organization[];
    pageInfo: PageInfo;
  };
}

export class TallyService {
  private client: GraphQLClient;
  private static readonly DEFAULT_BASE_URL = 'https://api.tally.xyz/query';

  // GraphQL Queries
  private static readonly LIST_DAOS_QUERY = gql`
    query Organizations($input: OrganizationsInput!) {
      organizations(input: $input) {
        nodes {
          ... on Organization {
            id
            name
            slug
            chainIds
            proposalsCount
            hasActiveProposals
            tokenOwnersCount
            delegatesCount
          }
        }
        pageInfo {
          firstCursor
          lastCursor
        }
      }
    }
  `;

  constructor(private config: TallyServiceConfig) {
    this.client = new GraphQLClient(config.baseUrl || TallyService.DEFAULT_BASE_URL, {
      headers: {
        'Api-Key': config.apiKey,
      },
    });
  }

  /**
   * List DAOs sorted by specified criteria
   * @param {ListDAOsParams} params - Parameters for listing DAOs
   * @returns {Promise<OrganizationsResponse>} List of DAOs and pagination info
   * @throws {Error} When the API request fails
   */
  async listDAOs(params: ListDAOsParams = {}): Promise<OrganizationsResponse> {
    const input: OrganizationsInput = {
      sort: {
        sortBy: params.sortBy || "popular",
        isDescending: true
      },
      page: {
        limit: Math.min(params.limit || 20, 50)
      }
    };

    if (params.afterCursor) {
      input.page!.afterCursor = params.afterCursor;
    }

    if (params.beforeCursor) {
      input.page!.beforeCursor = params.beforeCursor;
    }

    try {
      return await this.client.request(TallyService.LIST_DAOS_QUERY, { input });
    } catch (error) {
      throw new Error(`Failed to fetch DAOs: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Get OpenAI function definitions for the service
   */
  static getOpenAIFunctionDefinitions() {
    return [{
      name: "list_daos",
      description: "List DAOs on Tally sorted by specified criteria",
      parameters: {
        type: "object",
        properties: {
          limit: {
            type: "number",
            description: "Maximum number of DAOs to return (default: 20, max: 50)",
          },
          afterCursor: {
            type: "string",
            description: "Cursor for pagination",
          },
          sortBy: {
            type: "string",
            enum: ["id", "name", "explore", "popular"],
            description: "How to sort the DAOs (default: popular). 'explore' prioritizes DAOs with live proposals",
          },
        },
      },
    }];
  }

  /**
   * Format a list of DAOs into a human-readable string
   * @param {Organization[]} daos - List of DAOs to format
   * @returns {string} Formatted string representation
   */
  static formatDAOList(daos: Organization[]): string {
    return `Found ${daos.length} DAOs:\n\n` + 
      daos.map(dao => 
        `${dao.name} (${dao.slug})\n` +
        `Token Holders: ${dao.tokenOwnersCount}\n` +
        `Delegates: ${dao.delegatesCount}\n` +
        `Proposals: ${dao.proposalsCount}\n` +
        `Active Proposals: ${dao.hasActiveProposals ? 'Yes' : 'No'}\n` +
        `Description: ${dao.metadata?.description || 'No description available'}\n` +
        `Website: ${dao.metadata?.websiteUrl || 'N/A'}\n` +
        `Twitter: ${dao.metadata?.twitter || 'N/A'}\n` +
        `Discord: ${dao.metadata?.discord || 'N/A'}\n` +
        `GitHub: ${dao.metadata?.github || 'N/A'}\n` +
        `Governance: ${dao.metadata?.governanceUrl || 'N/A'}\n` +
        '---'
      ).join('\n\n');
  }
}

================
File: src/index.ts
================
#!/usr/bin/env node
import * as dotenv from 'dotenv';
import { TallyServer } from './server.js';

// Load environment variables
dotenv.config();

const apiKey = process.env.TALLY_API_KEY;
if (!apiKey) {
  console.error("Error: TALLY_API_KEY environment variable is required");
  process.exit(1);
}

// Create and start the server
const server = new TallyServer(apiKey);
server.start().catch((error) => {
  console.error("Fatal error:", error);
  process.exit(1);
});

================
File: src/server.ts
================
import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { 
  ListToolsRequestSchema,
  CallToolRequestSchema,
  type Tool,
  type TextContent
} from "@modelcontextprotocol/sdk/types.js";
import { TallyService, type OrganizationsSortBy } from './services/tally.service.js';

export class TallyServer {
  private server: Server;
  private service: TallyService;

  constructor(apiKey: string) {
    // Initialize service
    this.service = new TallyService({ apiKey });

    // Create server instance
    this.server = new Server(
      {
        name: "tally-api",
        version: "1.0.0",
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupHandlers();
  }

  private setupHandlers() {
    // List available tools
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      const tools: Tool[] = [
        {
          name: "list-daos",
          description: "List DAOs on Tally sorted by specified criteria",
          inputSchema: {
            type: "object",
            properties: {
              limit: {
                type: "number",
                description: "Maximum number of DAOs to return (default: 20, max: 50)",
              },
              afterCursor: {
                type: "string",
                description: "Cursor for pagination",
              },
              sortBy: {
                type: "string",
                enum: ["id", "name", "explore", "popular"],
                description: "How to sort the DAOs (default: popular). 'explore' prioritizes DAOs with live proposals",
              },
            },
          },
        },
      ];

      return { tools };
    });

    // Handle tool execution
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args = {} } = request.params;

      if (name === "list-daos") {
        try {
          const data = await this.service.listDAOs({
            limit: typeof args.limit === 'number' ? args.limit : undefined,
            afterCursor: typeof args.afterCursor === 'string' ? args.afterCursor : undefined,
            sortBy: typeof args.sortBy === 'string' ? args.sortBy as OrganizationsSortBy : undefined,
          });

          const content: TextContent[] = [
            {
              type: "text",
              text: TallyService.formatDAOList(data.organizations.nodes)
            }
          ];

          return { content };
        } catch (error) {
          throw new Error(`Error fetching DAOs: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }

      throw new Error(`Unknown tool: ${name}`);
    });
  }

  async start() {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    console.error("Tally MCP Server running on stdio");
  }
}

================
File: .env.example
================
# Server Configuration
PORT=3000 
# Your Tally API key from https://tally.xyz/settings
TALLY_API_KEY=your_api_key_here

================
File: .gitignore
================
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build output
build/
dist/
*.tsbuildinfo

# Environment variables
.env
.env.local
.env.*.local

# IDE
.idea/
.vscode/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

================
File: jest.config.js
================
export default {
  preset: 'ts-jest',
  testEnvironment: 'node',
  extensionsToTreatAsEsm: ['.ts'],
  moduleNameMapper: {
    '^(\\.{1,2}/.*)\\.js$': '$1',
  },
  transform: {
    '^.+\\.tsx?$': [
      'ts-jest',
      {
        useESM: true,
      },
    ],
  },
};

================
File: LICENSE
================
MIT License

Copyright (c) 2024 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "mpc-tally-api-server",
  "version": "1.0.0",
  "description": "A Model Context Protocol (MCP) server for interacting with the Tally API, enabling AI agents to access DAO governance data",
  "type": "module",
  "main": "build/index.js",
  "types": "build/index.d.ts",
  "bin": {
    "mpc-tally-api-server": "build/index.js"
  },
  "scripts": {
    "clean": "rm -rf build",
    "build": "bun build ./src/index.ts --outdir ./build --target node",
    "start": "node -r dotenv/config build/index.js",
    "dev": "bun --watch src/index.ts",
    "test": "bun test",
    "test:watch": "bun test --watch",
    "test:coverage": "bun test --coverage"
  },
  "files": [
    "build",
    "README.md",
    "LICENSE"
  ],
  "keywords": [
    "mcp",
    "tally",
    "dao",
    "governance",
    "ai",
    "typescript",
    "graphql"
  ],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.0.4",
    "dotenv": "^16.4.7",
    "graphql": "^16.10.0",
    "graphql-request": "^7.1.2",
    "zod": "^3.0.0"
  },
  "devDependencies": {
    "@types/jest": "^29.5.14",
    "@types/node": "^20.0.0",
    "jest": "^29.7.0",
    "ts-jest": "^29.2.5",
    "typescript": "^5.0.0"
  },
  "engines": {
    "node": ">=18"
  }
}

================
File: README.md
================
# MPC Tally API Server

A Model Context Protocol (MCP) server for interacting with the Tally API. This server allows AI agents to fetch information about DAOs, including their governance data, proposals, and metadata.

## Features

- List DAOs sorted by popularity or exploration status
- Fetch comprehensive DAO metadata including social links and governance information
- Pagination support for handling large result sets
- Built with TypeScript and GraphQL
- Full test coverage with Bun's test runner

## Installation

```bash
# Clone the repository
git clone https://github.com/yourusername/mpc-tally-api-server.git
cd mpc-tally-api-server

# Install dependencies
bun install

# Build the project
bun run build
```

## Configuration

1. Create a `.env` file in the root directory:
```env
TALLY_API_KEY=your_api_key_here
```

2. Get your API key from [Tally](https://tally.xyz)

## Usage

### Running the Server

```bash
# Start the server
bun run start

# Development mode with auto-reload
bun run dev
```

### Claude Desktop Configuration

Add the following to your Claude Desktop configuration:

```json
{
  "tally": {
    "command": "node",
    "args": [
      "/path/to/mpc-tally-api-server/build/index.js"
    ],
    "env": {
      "TALLY_API_KEY": "your_api_key_here"
    }
  }
}
```

## Available Scripts

- `bun run clean` - Clean the build directory
- `bun run build` - Build the project
- `bun run start` - Run the built server
- `bun run dev` - Run in development mode with auto-reload
- `bun test` - Run tests
- `bun test --watch` - Run tests in watch mode
- `bun test --coverage` - Run tests with coverage

## API Functions

The server exposes the following MCP functions:

### list_daos
Lists DAOs sorted by specified criteria.

Parameters:
- `limit` (optional): Maximum number of DAOs to return (default: 20, max: 50)
- `afterCursor` (optional): Cursor for pagination
- `sortBy` (optional): How to sort the DAOs (default: popular)
  - Options: "id", "name", "explore", "popular"

## License

MIT

================
File: tsconfig.json
================
{
    "compilerOptions": {
      "target": "ES2022",
      "module": "Node16",
      "moduleResolution": "Node16",
      "outDir": "./build",
      "rootDir": "./src",
      "strict": true,
      "esModuleInterop": true,
      "skipLibCheck": true,
      "forceConsistentCasingInFileNames": true
    },
    "include": ["src/**/*"],
    "exclude": ["node_modules", "src/**/__tests__/**/*"]
}
